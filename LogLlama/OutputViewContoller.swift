import Cocoa

/// This controller manages the window that shows script execution logs.  It receives updates generated by the ScriptViewController and puts them on the screen.
///
/// The same window has a tab for reference text, which we generate and populate when the view loads.
class OutputViewContoller: NSViewController {

  fileprivate enum CellIdentifiers {
    static let TextCell = "TextCellID"
  }

  @IBOutlet weak var textCell: NSTextFieldCell!
  @IBOutlet weak var tableView: NSTableView!
  @IBOutlet weak var tableColumn: NSTableColumn!
  @IBOutlet weak var referenceView: NSView!

  var lines: [String] = []
  var referenceTextView: NSTextView?

  override func viewDidLoad() {
    super.viewDidLoad()

    self.tableView.delegate = self as? NSTableViewDelegate
    self.tableView.dataSource = self
    self.tableView.columnAutoresizingStyle =
      NSTableView.ColumnAutoresizingStyle.firstColumnOnlyAutoresizingStyle
    self.tableView.sizeLastColumnToFit()

    NotificationCenter.default.addObserver(
      self, selector: #selector(onScriptProcessingUpdate(_:)), name: .ScriptProcessingUpdate,
      object: nil)
    NotificationCenter.default.addObserver(
      self, selector: #selector(onFontSizeUpdated(_:)), name: .FontSizeUpdated, object: nil)

    self.setupReferenceText()
  }

  private func setupReferenceText() {
    let referenceText = ScriptParser.getReferenceText()

    // Create an NSTextField to hold the reference text
    let textView = NSTextView()
    textView.string = referenceText
    textView.isEditable = false
    textView.isSelectable = true
    textView.translatesAutoresizingMaskIntoConstraints = true

    // Set up the text view to have no intrinsic size restriction
    textView.minSize = NSSize(width: 0.0, height: 0.0)
    textView.maxSize = NSSize(
      width: CGFloat.greatestFiniteMagnitude, height: CGFloat.greatestFiniteMagnitude)
    textView.isVerticallyResizable = true
    textView.isHorizontallyResizable = true
    textView.autoresizingMask = [.width, .height]  // Make sure it resizes horizontally with the scroll view

    // Create an NSScrollView
    let scrollView = NSScrollView()
    scrollView.hasVerticalScroller = true
    scrollView.hasHorizontalScroller = true
    scrollView.autohidesScrollers = true

    // Embed the text view in the scroll view
    scrollView.documentView = textView

    // Add the scroll view to the view controller's view
    self.referenceView.addSubview(scrollView)

    // Set up Auto Layout constraints to make the scroll view fill the parent view
    scrollView.translatesAutoresizingMaskIntoConstraints = false
    NSLayoutConstraint.activate([
      scrollView.leadingAnchor.constraint(equalTo: self.referenceView!.leadingAnchor),
      scrollView.trailingAnchor.constraint(equalTo: self.referenceView!.trailingAnchor),
      scrollView.topAnchor.constraint(equalTo: self.referenceView!.topAnchor),
      scrollView.bottomAnchor.constraint(equalTo: self.referenceView!.bottomAnchor),
    ])

    // We'll need this later if the font changes
    self.referenceTextView = textView

  }

  @objc private func onFontSizeUpdated(_ notification: Notification) {
    if let update = notification.object as? FontSizeUpdate {
      if let origFont = self.textCell?.font {
        let newFont = NSFont(descriptor: origFont.fontDescriptor, size: CGFloat(update.size))
        self.textCell?.font = newFont
        self.tableView.rowHeight = CGFloat(update.size + 4)
        self.tableView.noteNumberOfRowsChanged()
        self.referenceTextView?.font = newFont
      }
    }
  }

  @objc private func onScriptProcessingUpdate(_ notification: Notification) {
    if let update = notification.object as? ScriptProcessingUpdate {
      if update.clear {
        lines.removeAll()
      } else {
        lines.append(update.text)
      }

      self.tableView.noteNumberOfRowsChanged()
      self.tableView.scrollRowToVisible(tableView.numberOfRows - 1)
    }
  }

  @IBAction func onDoubleClick(_ sender: Any) {
    let viewController =
      self.storyboard?.instantiateController(withIdentifier: "LogDetail")
      as! LineDetailViewController

    let text = self.getSelectedText()
    if text.count > 0 {
      viewController.setText(text: text)
      viewController.setFont(font: self.textCell!.font!)
      self.presentAsModalWindow(viewController)
    }
  }

  func getSelectedText() -> String {
    var text = ""
    for (_, idx) in (tableView?.selectedRowIndexes.enumerated())! {
      if text != "" {
        text = text + "\n"
      }
      text = text + self.lines[idx]
    }

    return text
  }
}

extension OutputViewContoller: NSTableViewDataSource {

  func numberOfRows(in tableView: NSTableView) -> Int {
    lines.count
  }

  func tableView(_ tableView: NSTableView, objectValueFor tableColumn: NSTableColumn?, row: Int)
    -> Any?
  {
    lines[row]
  }

  func tableView(_: NSTableView, shouldEdit: NSTableColumn?, row: Int) -> Bool {
    false
  }
}
